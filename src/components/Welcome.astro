---
import { sanityClient } from "sanity:client";

interface Category {
  _id: string;
  title: string;
}

interface Post {
  title: string;
  slug: { current: string };
  publishedAt: string;
  excerpt?: string;
  categories: Category[];
  mainImage?: {
    asset: {
      _id: string;
      url: string;
    };
  };
}

const query = `{
  "posts": *[_type == "post"] | order(publishedAt desc) {
  title,
    slug,
    publishedAt,
    excerpt,
    categories[]->{
      _id,
      title
    },
    mainImage {
      asset->{
        _id,
        url
      }
    }
  },
  "categories": *[_type == "category"] {
    _id,
    title
  }
}`;

const { posts, categories } = await sanityClient.fetch<{
  posts: Post[];
  categories: Category[];
}>(query);

console.log(posts);
console.log(categories);
---

<div id="container" class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
  <main class="mx-auto max-w-7xl sm:px-4 lg:px-8 py-6 md:py-8">
    <div class="flex flex-col items-center">
      <h1
        class="text-4xl md:text-6xl font-bold text-slate-100 font-quintessential text-center"
      >
        <span class="text-indigo-500 text-5xl md:text-7xl">T</span>his
        <span class="text-indigo-500 text-5xl md:text-7xl">W</span>eek in
        <span class="text-indigo-500 text-5xl md:text-7xl">A</span>lex<span
          class="text-indigo-500 text-5xl md:text-7xl">T</span
        >own
      </h1>
      <h2
        class="text-2xl md:text-4xl font-bold text-slate-100 font-quintessential text-center pt-6"
      >
        A blog by a dingus.<br /><div class="h-4"></div>New posts every Sunday.
      </h2>
    </div>
  </main>

  <div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 py-8">
    <!-- Category Filter -->
    <div class="mb-8">
      <div class="text-sm font-medium text-slate-100 mb-3">
        Filter by Categories
      </div>
      <div class="flex flex-wrap gap-2" id="category-filters">
        {
          categories.map((category) => (
            <button
              type="button"
              data-category-id={category._id}
              class="category-filter inline-flex items-center px-3 py-1.5 rounded-sm text-sm font-medium bg-gray-100 text-gray-800 hover:bg-gray-200 transition-colors duration-200"
            >
              {category.title}
            </button>
          ))
        }
      </div>
    </div>

    <div
      id="posts-grid"
      class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 pb-24"
    >
      {
        posts.map((post: Post) => (
          <article
            class="blog-card rounded-sm overflow-hidden hover:-translate-y-1 transition-transform duration-200 ease-in-out border border-gray-200"
            data-categories={post.categories?.map((cat) => cat._id).join(",")}
          >
            {post.mainImage && (
              <img
                src={post.mainImage.asset.url}
                alt={post.title}
                class="w-full h-48 object-cover"
              />
            )}
            <div class="p-6">
              <h2 class="text-2xl text-gray-900 mb-2 font-quintessential">
                {post.title}
              </h2>
              <time datetime={post.publishedAt} class="text-sm text-gray-500">
                {new Date(post.publishedAt).toLocaleDateString()}
              </time>
              {post.categories && (
                <div class="mt-2 space-x-2">
                  {post.categories.map((category) => (
                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
                      {category.title}
                    </span>
                  ))}
                </div>
              )}
              {post.excerpt && (
                <p class="mt-4 text-gray-600 line-clamp-3">{post.excerpt}</p>
              )}
              <a
                href={`/post/${post.slug.current}`}
                class="inline-block mt-4 text-gray-900 font-medium hover:underline"
              >
                Read more â†’
              </a>
            </div>
          </article>
        ))
      }
    </div>
  </div>
</div>

<script>
  // Client-side filtering logic
  const categoryFilters = document.querySelectorAll(".category-filter");
  const postsGrid = document.getElementById("posts-grid");
  const articles = postsGrid?.getElementsByTagName("article");
  const selectedCategories = new Set<string>();

  categoryFilters.forEach((filter) => {
    filter.addEventListener("click", () => {
      const categoryId = filter.getAttribute("data-category-id") as string;

      // Toggle selection
      if (selectedCategories.has(categoryId)) {
        selectedCategories.delete(categoryId);
        filter.classList.remove("bg-indigo-600", "text-white");
        filter.classList.add("bg-gray-100", "text-gray-800");
      } else {
        selectedCategories.add(categoryId);
        filter.classList.remove("bg-gray-100", "text-gray-800");
        filter.classList.add("bg-indigo-600", "text-white");
      }

      // Filter articles
      if (articles) {
        Array.from(articles).forEach((article) => {
          const articleCategories =
            article.getAttribute("data-categories")?.split(",") || [];

          // Show article if no categories are selected or if it matches any selected category
          const shouldShow =
            selectedCategories.size === 0 ||
            articleCategories.some((cat) => selectedCategories.has(cat));

          article.style.display = shouldShow ? "" : "none";
        });
      }
    });
  });

  // Add hover effect for selected categories
  categoryFilters.forEach((filter) => {
    filter.addEventListener("mouseenter", () => {
      if (!filter.classList.contains("bg-indigo-600")) {
        filter.classList.add("bg-gray-200");
      }
    });

    filter.addEventListener("mouseleave", () => {
      if (!filter.classList.contains("bg-indigo-600")) {
        filter.classList.remove("bg-gray-200");
        filter.classList.add("bg-gray-100");
      }
    });
  });
</script>

<style>
  .blog-card {
    background-color: #f4f4f4;
  }
</style>
